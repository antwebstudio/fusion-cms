"use strict";(self.webpackChunkfusioncms=self.webpackChunkfusioncms||[]).push([[8648],{52:(e,t,s)=>{s.d(t,{Z:()=>n});const n={props:{value:{type:Object,required:!0}},computed:{settings:{get:function(){return this.value.settings||{}},set:function(e){this.$set(this.value.settings,e)}},errors:function(){return this.value.errors||{}}}}},8648:(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var n=s(3802),o={class:"row"};const i={name:"fieldset-fieldtype-settings",mixins:[s(52).Z],data:function(){return{options:[]}},mounted:function(){var e=this;axios.get("/api/fieldsets").then((function(t){e.options=_.map(t.data.data,(function(e){return{label:e.name,value:e.id}})),e.options.unshift({label:"None",value:null})}))}};const r=(0,s(3744).Z)(i,[["render",function(e,t,s,i,r,l){var a=(0,n.resolveComponent)("ui-select-group");return(0,n.openBlock)(),(0,n.createElementBlock)("div",o,[(0,n.createVNode)(a,{class:"col w-full sm:w-1/2",name:"fieldset",label:"Fieldset",help:"The fieldset from which to integrate fields.",autocomplete:"off",options:r.options,"has-error":e.errors.has("settings.fieldset"),"error-message":e.errors.get("settings.fieldset"),modelValue:e.settings.fieldset,"onUpdate:modelValue":t[0]||(t[0]=function(t){return e.settings.fieldset=t})},null,8,["options","has-error","error-message","modelValue"])])}]])}}]);